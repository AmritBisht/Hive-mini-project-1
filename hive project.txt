Q1. Create a schema based on the given dataset

Ans: create table agent_performance_bkp                                                                                               
            (                                                                                                                                       
            sl_no int,                                                                                                                            
            agent_date string,                                                                                                                       
            agent_name string,                                                                                                                         
            total_chats int,
            average_response_time string,                                                                                                                            
            average_resolution_time string,                                                                                                                       
            average_rating float,                                                                                                                         
            total_feedback int)
            row format delimited                                                                                                                    
            fields terminated by ','
            tblproperties("skip.header.line.count"="1"); 

        create table agent_performance                                                                                              
            (                                                                                                                                       
            sl_no int,                                                                                                                            
            agent_date date,                                                                                                                       
            agent_name string,                                                                                                                         
            total_chats int,
            average_response_time bigint,                                                                                                                            
            average_resolution_time bigint,                                                                                                                       
            average_rating float,                                                                                                                         
            total_feedback int)
            row format delimited                                                                                                                    
            fields terminated by ',';


            create table agent_loging_report                                                                                                 
            (                                                                                                                                       
            sl_no int,                                                                                                                            
            agent_name string,                                                                                                                       
            agent_date date,                                                                                                                         
            login_time bigint,
            logout_time bigint,                                                                                                                            
            duration bigint)
            row format delimited                                                                                                                    
            fields terminated by ',';


        create table agent_loging_report_bkp                                                                                              
            (                                                                                                                                       
            sl_no int,                                                                                                                            
            agent_name string,                                                                                                                       
            agent_date string,                                                                                                                         
            login_time string,
            logout_time string,                                                                                                                            
            duration string)
            row format delimited                                                                                                                    
            fields terminated by ','
            tblproperties("skip.header.line.count"="1");


Q2. Dump the data inside the hdfs in the given schema location.

Ans: load data local inpath 'file:///config/workspace/AgentPerformance.csv' into table agent_performance_bkp ;
    
     insert into table agent_performance select sl_no,
        from_unixtime(unix_timestamp(agent_date,'mm/dd/yyyy'), 'yyyy-mm-dd'), agent_name, total_chats,
        case when average_response_time like '%:%:%' then unix_timestamp(average_response_time,'HH:mm:ss') 
                            when average_response_time like '%:%'   then unix_timestamp(average_response_time,'mm:ss') 
                            else average_response_time
                        end as average_response_time,
        case when average_resolution_time like '%:%:%' then unix_timestamp(average_resolution_time,'HH:mm:ss') 
                            when average_resolution_time like '%:%'   then unix_timestamp(average_resolution_time,'mm:ss') 
                            else average_resolution_time
                        end as average_resolution_time,
        average_rating, total_feedback
        from agent_performance_bkp;

     load data local inpath 'file:///config/workspace/AgentLogingReport.csv' into table agent_loging_report_bkp ;

     insert into table agent_loging_report select sl_no, agent_name,
        from_unixtime(unix_timestamp(substr(agent_date,0,11),'dd-MMM-yy')),
        case when login_time like '%:%:%' then unix_timestamp(login_time,'HH:mm:ss') 
                            when login_time like '%:%'   then unix_timestamp(login_time,'mm:ss') 
                            else login_time
                        end as login_time,
        case when logout_time like '%:%:%' then unix_timestamp(logout_time,'HH:mm:ss') 
                            when logout_time like '%:%'   then unix_timestamp(logout_time,'mm:ss') 
                            else logout_time
                        end as logout_time,
        case when duration like '%:%:%' then unix_timestamp(duration,'HH:mm:ss') 
                            when duration like '%:%'   then unix_timestamp(duration,'mm:ss') 
                            else duration
                        end as duration
        from agent_loging_report_bkp;


Q3. List of all agents names.

Ans: set hive.cli.print.header = true ;
     select distinct(agent_name) from agent_performance ;


Q4. Find out agent average rating.

Ans: select agent_name , round(avg(average_rating),2) as avg_rating from agent_performance group by agent_name ;


Q5. Total working days for each agents 

Ans: select agent_name , count(agent_date) as total_working_daysfrom agent_loging_report ;


Q6. Total query that each agent have taken 

Abs: select agent_name , sum(total_chats) from agent_performance group by agent_name ;


Q7. Total Feedback that each agent have received 

Ans: select aent_name , sum(total_feedback) from agent_performance group by agent_name ;


Q8. Agent name who have average rating between 3.5 to 4 

Ans:  select agent_name, avg(average_rating) as avg_rating from agent_performance group by agent_name
      having avg(average_rating) between 3.5 and 4;


Q9. Agent name who have rating less than 3.5

Ans: select agent_name, avg(average_rating) as avg_rating from agent_performance group by agent_name
      having avg(average_rating) < 3.5 ;


Q10. Agent name who have rating more than 4.5 

Ans: select agent_name, avg(average_rating) as avg_rating from agent_performance group by agent_name
     having avg(average_rating) < 4.5 ;


Q11. How many feedback agents have received more than 4.5 average

Ans: select agent_name, count(average_rating) as frequency from agent_performance where average_rating > 4.5
    group by agent_name;


Q12. average weekly response time for each agent 

Ans: select agent_name, weekofyear(agent_date) as week_number, round(avg(average_response_time),2)
     from agent_performance
     group by agent_name, weekofyear(agent_date);


Q13. average weekly resolution time for each agents 

Ans: select agent_name, weekofyear(agent_date) as week_number, round(avg(average_resolution_time),2)
     from agent_performance
     group by agent_name, weekofyear(agent_date);


Q14. Find the number of chat on which they have received a feedback 

Ans: select agent_name, count(total_chats) from agent_performance 
      where total_chats <> 0
      group by agent_name;


Q15. Total contribution hour for each and every agents weekly basis 

Ans: select agent_name, weekofyear(agent_date) as week_number, round((sum(duration)/60)/60,2) as hours_worked
     from agent_loging_report
     group by agent_name, weekofyear(agent_date);


Q16. Perform inner join, left join and right join based on the agent column and after joining the table export that data into your local system.

Ans: Inner Join:

     with alr as (select agent_name, (sum(duration)/60)/60 as hours_worked from agent_loging_report group by agent_name) select ap.agent_name, sum(ap.total_chats) as total_chats, Round(sum(ap.average_response_time/60)/60, 3) as response_time, Round(avg(average_rating), 3) as avg_rating,
     Round(sum(ap.average_resolution_time/60)/60, 3) as resolution_time, sum(ap.total_feedback) as total_feedback, Round(a.hours_worked, 3) as hours_served
     from alr a 
     inner join agent_performance ap 
     on a.agent_name = ap.agent_name
     group by ap.agent_name, a.hours_worked;
 

     Loading data from query into Local File system 
  
     insert overwrite local directory '/config/workspace/innerjoin.csv' select ap.agent_name, sum(ap.total_chats) as total_chats, Round(sum(ap.average_response_time/60)/60, 3) as response_time,
     Round(sum(ap.average_resolution_time/60)/60, 3) as resolution_time, Round(avg(average_rating), 3) as avg_rating, sum(ap.total_feedback) as total_feedback, Round(d.hours_worked, 3) as hours_served
     from agent_performance ap 
     inner join (select agent_name, (sum(duration)/60)/60 as hours_worked from agent_loging_report group by agent_name) d
     on d.agent_name = ap.agent_name
     group by ap.agent_name, d.hours_worked;


    Right Join:

     with alr as (select agent_name, (sum(duration)/60)/60 as hours_worked from agent_loging_report group by agent_name) select ap.agent_name, sum(ap.total_chats) as total_chats, Round(sum(ap.average_response_time/60)/60, 3) as response_time, Round(avg(average_rating), 3) as avg_rating,
     Round(sum(ap.average_resolution_time/60)/60, 3) as resolution_time, sum(ap.total_feedback) as total_feedback, Round(a.hours_worked, 3) as hours_served
     from alr a 
     right join agent_performance ap 
     on a.agent_name = ap.agent_name
     group by ap.agent_name, a.hours_worked;
 

     Loading data from query into Local File system 
  
     insert overwrite local directory '/config/workspace/rightjoin.csv' select ap.agent_name, sum(ap.total_chats) as total_chats, Round(sum(ap.average_response_time/60)/60, 3) as response_time,
     Round(sum(ap.average_resolution_time/60)/60, 3) as resolution_time, Round(avg(average_rating), 3) as avg_rating, sum(ap.total_feedback) as total_feedback, Round(d.hours_worked, 3) as hours_served
     from agent_performance ap 
     left join (select agent_name, (sum(duration)/60)/60 as hours_worked from agent_loging_report group by agent_name) d
     on d.agent_name = ap.agent_name
     group by ap.agent_name, d.hours_worked;


     left Join:

     with alr as (select agent_name, (sum(duration)/60)/60 as hours_worked from agent_loging_report group by agent_name) select ap.agent_name, sum(ap.total_chats) as total_chats, Round(sum(ap.average_response_time/60)/60, 3) as response_time, Round(avg(average_rating), 3) as avg_rating,
     Round(sum(ap.average_resolution_time/60)/60, 3) as resolution_time, sum(ap.total_feedback) as total_feedback, Round(a.hours_worked, 3) as hours_served
     from alr a 
     left join agent_performance ap 
     on a.agent_name = ap.agent_name
     group by ap.agent_name, a.hours_worked;
 

     Loading data from query into Local File system 
  
     insert overwrite local directory '/config/workspace/leftjoin.csv' select ap.agent_name, sum(ap.total_chats) as total_chats, Round(sum(ap.average_response_time/60)/60, 3) as response_time,
     Round(sum(ap.average_resolution_time/60)/60, 3) as resolution_time, Round(avg(average_rating), 3) as avg_rating, sum(ap.total_feedback) as total_feedback, Round(d.hours_worked, 3) as hours_served
     from agent_performance ap 
     left join (select agent_name, (sum(duration)/60)/60 as hours_worked from agent_loging_report group by agent_name) d
     on d.agent_name = ap.agent_name
     group by ap.agent_name, d.hours_worked;



Q17. Perform partitioning on top of the agent column and then on top of that perform bucketing for each partitioning.


Ans: set hive.exec.dynamic.partition=true;
     Create Partition_bucketed table:
    
        create table partition_bucketed_loging
        (
            s_no int,
            agent_date date,
            login_time string,
            logout_time string,
            duration string
        )
        partitioned by (agent string)
        clustered by(s_no)
        into 4 buckets
        row format delimited
        fields terminated by ','
        stored as textfile;


    Load data into Partition_bucketed table:
    
    set hive.exec.dynamic.patition.mode=nonstrict; 

    insert overwrite table partition_bucketed_loging partition(agent) select sl_no,agent_name, agent_date, login_time, logout_time, duration from agent_loging_report;
     



     